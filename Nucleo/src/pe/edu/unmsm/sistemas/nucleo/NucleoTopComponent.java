/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pe.edu.unmsm.sistemas.nucleo;

import org.pmw.tinylog.Logger;

import java.util.Collection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.pmw.tinylog.Configurator;
import org.pmw.tinylog.writers.FileWriter;
import pe.edu.unmsm.sistemas.filtro.IFiltro;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//pe.edu.unmsm.sistemas.nucleo//Nucleo//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NucleoTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "pe.edu.unmsm.sistemas.nucleo.NucleoTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NucleoAction",
        preferredID = "NucleoTopComponent"
)
@Messages({
    "CTL_NucleoAction=Nucleo",
    "CTL_NucleoTopComponent=Nucleo Window",
    "HINT_NucleoTopComponent=This is a Nucleo window"
})
public final class NucleoTopComponent extends TopComponent {
    private InstanceContent mensaje;
    public NucleoTopComponent() {
        initComponents();
        setName(Bundle.CTL_NucleoTopComponent());
        setToolTipText(Bundle.HINT_NucleoTopComponent());
        mensaje =new InstanceContent();
        associateLookup(new AbstractLookup(mensaje));
//        Configurator.currentConfig()
//                .writer(new FileWriter("log.txt", false, true))
//                .activate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonFiltro = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(botonFiltro, org.openide.util.NbBundle.getMessage(NucleoTopComponent.class, "NucleoTopComponent.botonFiltro.text")); // NOI18N
        botonFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltroActionPerformed(evt);
            }
        });

        texto.setColumns(20);
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonFiltro))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonFiltro))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltroActionPerformed
        String txt = texto.getText();
        mensaje.add(txt);
        Collection<? extends IFiltro> filtros = 
                Lookup.getDefault().lookupAll(IFiltro.class);
        StringBuilder sb = new StringBuilder();
        for (IFiltro filtro : filtros){
            String s = filtro.procesar(txt);
            sb.append(s).append("\n");    
            Logger.info("Se proceso el filtro " + filtro.getNombre());
        }
        Logger.info("Se presiono el boton filtrar");
       
        mensaje.add(sb.toString());
        texto.setText(sb.toString());
    }//GEN-LAST:event_botonFiltroActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonFiltro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
